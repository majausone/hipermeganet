const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
    databaseGet: (table, id) => ipcRenderer.invoke('database-get', table, id),
    databaseInsert: (table, data) => ipcRenderer.invoke('database-insert', table, data),
    databaseUpdate: (table, id, data) => ipcRenderer.invoke('database-update', table, id, data),
    databaseRemove: (table, id) => ipcRenderer.invoke('database-remove', table, id),
    translateVideo: (video, targetLanguage) => ipcRenderer.invoke('translate-video', video, targetLanguage),
    googleAuthStart: () => ipcRenderer.invoke('google-auth-start'),
    googleAuthSubmitCode: (code) => ipcRenderer.invoke('google-auth-submit-code', code),
    refreshToken: (accountId) => ipcRenderer.invoke('refresh-token', accountId),
    syncAllChannels: () => ipcRenderer.invoke('sync-all-channels'),
    syncAccount: (accountId) => ipcRenderer.invoke('sync-account', accountId),
    syncChannel: (channelId) => ipcRenderer.invoke('sync-channel', channelId),
    updateConfig: (newConfig) => ipcRenderer.invoke('update-config', newConfig),
    selectFile: () => ipcRenderer.invoke('select-file'),
    selectDirectory: () => ipcRenderer.invoke('select-directory'),
    autoAssignFiles: () => ipcRenderer.invoke('auto-assign-files'),
    updateYoutubeVideo: (videoId, uploadThumbnail) => ipcRenderer.invoke('update-youtube-video', videoId, uploadThumbnail),
    uploadYoutubeVideo: (videoId, uploadThumbnail) => ipcRenderer.invoke('upload-youtube-video', videoId, uploadThumbnail),
    saveFilters: (tableId, filters) => ipcRenderer.invoke('save-filters', tableId, filters),
    loadFilters: (tableId) => ipcRenderer.invoke('load-filters', tableId),
    saveColumnOrder: (tableId, columnOrder) => ipcRenderer.invoke('save-column-order', tableId, columnOrder),
    loadColumnOrder: (tableId) => ipcRenderer.invoke('load-column-order', tableId),
    deleteLocalData: () => ipcRenderer.invoke('delete-local-data'),
    bulkUploadVideos: (videoIds) => ipcRenderer.invoke('bulk-upload-videos', videoIds),
    onUploadProgress: (callback) => ipcRenderer.on('upload-progress', callback),
    onQuotaExceeded: (callback) => ipcRenderer.on('quota-exceeded', callback),
    onUploadComplete: (callback) => ipcRenderer.on('upload-complete', callback),
    onUploadError: (callback) => ipcRenderer.on('upload-error', callback),
    openMiniaturizator: (videoId) => ipcRenderer.send('open-miniaturizator', videoId),
    getVideo: (videoId) => ipcRenderer.invoke('get-video', videoId),
    updateVideo: (videoId, data) => ipcRenderer.invoke('update-video', videoId, data),
    saveImage: (buffer, filePath) => ipcRenderer.invoke('save-image', buffer, filePath),
    openFolder: (path) => ipcRenderer.invoke('open-folder', path),
    openDownloader: (videoId) => ipcRenderer.send('open-downloader', videoId),
    startVideoDownload: (url, filePath) => ipcRenderer.invoke('start-video-download', url, filePath),
    cancelDownload: (filePath) => ipcRenderer.invoke('cancel-download', filePath),
    onDownloadProgress: (callback) => ipcRenderer.on('download-progress', callback),
    getLanguageByCode: (code) => ipcRenderer.invoke('get-language-by-code', code),
    selectDatabaseFile: () => ipcRenderer.invoke('select-database-file'),
    saveDatabaseFile: () => ipcRenderer.invoke('save-database-file'),
    importDatabase: (filePath) => ipcRenderer.invoke('import-database', filePath),
    exportDatabase: (filePath) => ipcRenderer.invoke('export-database', filePath),
    closeApp: () => ipcRenderer.invoke('close-app')
});